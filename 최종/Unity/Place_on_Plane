using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

    /// <summary>
    /// Listens for touch events and performs an AR raycast from the screen touch point.
    /// AR raycasts will only hit detected trackables like feature points and planes.
    ///
    /// If a raycast hits a trackable, the <see cref="placedPrefab"/> is instantiated
    /// and moved to the hit position.
    /// </summary>
    [RequireComponent(typeof(ARRaycastManager))]
    public class PlaceOnPlane : MonoBehaviour
    {
        [SerializeField]
        [Tooltip("Instantiates this prefab on a plane at the touch location.")]
        GameObject m_PlacedPrefab;

        UnityEvent placementUpdate;

        [SerializeField]
        GameObject visualObject;

        /// <summary>
        /// The prefab to instantiate on touch.
        /// </summary>
        public GameObject placedPrefab
        {
            get { return m_PlacedPrefab; }
            set { m_PlacedPrefab = value; }
        }

        /// <summary>
        /// The object instantiated as a result of a successful raycast intersection with a plane.
        /// </summary>
        public GameObject spawnedObject { get; private set; }

        ARRaycastManager m_RaycastManager;

        // A list to store hits from the raycast
        static List<ARRaycastHit> s_Hits = new List<ARRaycastHit>();

        void Awake()
        {
            m_RaycastManager = GetComponent<ARRaycastManager>();

            if (placementUpdate == null)
                placementUpdate = new UnityEvent();

            placementUpdate.AddListener(DiableVisual);
        }

        bool TryGetTouchPosition(out Vector2 touchPosition)
        {
            if (Input.touchCount > 0)
            {
                touchPosition = Input.GetTouch(0).position;
                return true;
            }

            touchPosition = default;
            return false;
        }

        void Update()
        {
            // Check if touch input is available
            if (!TryGetTouchPosition(out Vector2 touchPosition))
                return;

            // Perform a raycast to find a plane in the scene
            if (m_RaycastManager.Raycast(touchPosition, s_Hits, TrackableType.PlaneWithinPolygon))
            {
                // Get the position and rotation of the first hit
                var hitPose = s_Hits[0].pose;

                // If no object has been spawned yet, instantiate it
                if (spawnedObject == null)
                {
                    // Specify a fixed rotation for the object when placed
                    spawnedObject = Instantiate(m_PlacedPrefab, hitPose.position, Quaternion.Euler(90, 0, 0)); // 예: 90도 회전
                }
                else
                {
                    // Update position of the existing spawned object
                    spawnedObject.transform.position = hitPose.position;
                }

                // Trigger the update event
                placementUpdate.Invoke();
            }
        }

        public void DiableVisual()
        {
            visualObject.SetActive(false);
        }
    }
