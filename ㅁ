- aws 설정 방법
    
    ### 0. IAM 역할 만들기
    
    - 역할 생성
        - AWS 서비스
        - Lambda
            - AmazonS3FullAccess
            - AWSLambdaBasicExcutionRole
        - 이름 : unity-test
    
    ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/480e6879-a761-489b-8e9d-8a79d1779f4e/207b0d9e-d845-4e81-82b6-8bf0e62a5c21/image.png)
    
    ### 1. AWS S3 버킷 생성
    
    - 버킷 생성
        - 이름 : unity-na
        - 모들 퍼블릭 액세스 차단 해제
        - 다른건 그대로
    
    ### 2. 버킷 정책 설정
    
    - 버킷
        - 권한
            - 버킷 정책 편집
    - 빨간색 부분은 자기 환경에 맞춰서 바꾸기(버킷 이름, 역할 arn)
    
    ```json
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowPublicReadForGetBucketObjects",
          "Effect": "Allow",
          "Principal": "*",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::your-bucket-name/*" 
        },
        {
          "Sid": "AllowUploadFromAPI",
          "Effect": "Allow",
          "Principal": {
            "AWS": "arn:aws:iam::YOUR_LAMBDA_ROLE_ID"
          },
          "Action": "s3:PutObject",
          "Resource": "arn:aws:s3:::your-bucket-name/*"
        }
      ]
    }
    ```
    
    ### 3. Lambda 함수 생성 (이미지 업로드)
    
    - 함수 생성
        - 이름 : unity-test
        - 런타임 : Python 3.9
        - 기본 실행 역할 변경
            - 기존 역할 사용(unity-test 아까만든거)
    - 함수 생성 후 구성 탭
        - 환경 변수 편집
            - 환경 변수 추가
            - 키 : `BUCKET_NAME`
            - 값 : unity-na(아까 만든 버킷 이름)
    - 함수 코드 작성
    
    ```python
    import json
    import boto3
    import base64
    import os
    
    s3 = boto3.client('s3')
    BUCKET_NAME = os.environ['BUCKET_NAME']  # 환경 변수를 통해 S3 버킷 이름 설정
    
    def lambda_handler(event, context):
        print("Received event: " + json.dumps(event))  # 디버그 로그 추가
    
        try:
            # 이미지 데이터 가져오기
            image_data = event.get('file')  # 'body'를 사용하지 않고 'file'에서 직접 가져오기
            
            if image_data is None:
                raise ValueError("No image data found in the request body")
    
            # Base64로 인코딩된 이미지를 디코딩
            image_bytes = base64.b64decode(image_data)  # Base64 디코딩
            file_name = "uploaded_image.jpg"  # JPG 형식으로 저장
            
            # S3에 이미지 저장
            response = s3.put_object(Bucket=BUCKET_NAME, Key=file_name, Body=image_bytes)
            print("S3 Response:", response)  # S3 응답 확인
            
            return {
                'statusCode': 200,
                'body': json.dumps('Image uploaded successfully!')
            }
        except Exception as e:
            print("Error:", str(e))  # 에러 메시지 출력
            return {
                'statusCode': 400,
                'body': json.dumps('Error uploading image: ' + str(e))
            }
    ```
    
    - 코드 입력 후 Deploy
    
    ### 4. AWS API Gateway 생성
    
    - REST API 생성
        - 새 API
        - 이름 : unity-api
    - 리소스 생성
        - v1
        - 오리진 간 리소스 공유(CORS) 체크하기
    - 메서드 생성
        - 유형 : POST
        - 통합 유형 : Lambda 함수
        - Lambda 함수 (아까 만든 함수 선택)
    - API 배포
        - 새스테이지 : upload
    - 스테이지 탭
        - POST의 URL 복사(https://bzc1mja11a.execute-api.us-east-1.amazonaws.com/upload/v1)
- Unity 설정 방법
    
    ### 1. Unity 프로젝트 생성
    
    1. **Unity Hub 실행**: Unity Hub를 열고 **Projects** 탭에서 상단의 **New Project** 버튼을 클릭합니다.
    2. **프로젝트 세부 설정**:
        - **Project Name**: 프로젝트 이름을 입력합니다 (예: "BathroomPhotoApp").
        - **Location**: 프로젝트 저장 위치를 설정합니다.
    3. **템플릿 선택**: 템플릿 중에서 **3D**를 선택한 후 **Create Project** 버튼을 클릭하여 프로젝트를 생성합니다.
    
    ### 2. 카메라 및 UI 설정
    
    ### 2.1 기본 카메라 설정
    
    1. **기본 카메라 확인**: Scene 뷰에서 기본으로 제공되는 카메라가 존재합니다. 이를 확인하려면 **Hierarchy** 창에서 **Main Camera**를 선택합니다.
    2. **카메라 위치 조정**: Scene 뷰에서 카메라의 위치와 회전을 적절하게 설정합니다. 필요에 따라 카메라의 **Transform** 값을 조정해 사진 촬영 시 원하는 시점을 잡을 수 있도록 합니다.
    
    ### 2.2 UI Canvas 생성 및 버튼 추가
    
    1. **Canvas 생성**:
        - **Hierarchy** 창에서 마우스 오른쪽 버튼을 클릭하고 **UI** → **Canvas**를 선택합니다.
        - Canvas는 UI 요소를 담는 컨테이너입니다. 화면에 UI가 제대로 표시될 수 있도록 기본적으로 자동 크기로 설정됩니다.
    2. **사진 촬영 버튼 추가**:
        - **Canvas**를 선택한 상태에서 **Hierarchy** 창에서 마우스 오른쪽 버튼을 클릭하고 **UI** → **Button**을 선택합니다.
        - **Button**을 추가하면 화면에 기본적인 버튼이 생성됩니다. 버튼의 크기와 위치는 **RectTransform** 컴포넌트를 통해 조정할 수 있습니다.
    3. **버튼 텍스트 변경**:
        - **Hierarchy** 창에서 **Button** 아래의 **Text**를 선택한 후 **Inspector** 창에서 **Text** 컴포넌트의 **Text** 필드 값을 "사진 촬영"으로 변경합니다.
        - 텍스트의 폰트 크기나 정렬 등을 적절히 수정할 수 있습니다.
    
    ### 3. 사진 촬영 및 업로드 코드 작성
    
    ### 3.1 PhotoCapture C# 스크립트 생성
    
    1. **스크립트 생성**:
        - **Project** 창에서 **Assets** 폴더를 마우스 오른쪽 버튼으로 클릭하고 **Create** → **C# Script**를 선택한 후 **PhotoCapture.cs**라는 이름을 입력합니다.
    2. **코드 작성**:
        - 위에 제공된 코드(`PhotoCapture.cs`)를 작성합니다. 이 코드는 사진을 촬영하고, 촬영된 이미지를 서버에 업로드하는 역할을 합니다.
        - 보라색 부분 (api 주소 변경)
        
        ```csharp
        using UnityEngine;
        using UnityEngine.UI;
        using UnityEngine.Networking;
        using System.Collections;
        using System.Text;
        
        public class PhotoCapture : MonoBehaviour
        {
            private WebCamTexture webcamTexture;
        
            void Start()
            {
                webcamTexture = new WebCamTexture();
                webcamTexture.Play();
            }
        
            public void CaptureAndUploadPhoto()
            {
                Texture2D photo = new Texture2D(webcamTexture.width, webcamTexture.height);
                photo.SetPixels(webcamTexture.GetPixels());
                photo.Apply();
        
                byte[] imageBytes = photo.EncodeToJPG(); // JPG 형식으로 인코딩
                string base64Image = System.Convert.ToBase64String(imageBytes); // Base64 인코딩
                StartCoroutine(UploadImage(base64Image));
            }
        
            private IEnumerator UploadImage(string base64Image)
            {
                // JSON 포맷으로 이미지 데이터를 감쌈
                string jsonBody = "{\"file\":\"" + base64Image + "\"}";
        
                UnityWebRequest request = new UnityWebRequest("https://f9mb3zvzia.execute-api.us-east-1.amazonaws.com/detect/upload", "POST");
                byte[] jsonBytes = Encoding.UTF8.GetBytes(jsonBody);
                
                // JSON 바디를 설정
                request.uploadHandler = new UploadHandlerRaw(jsonBytes);
                request.downloadHandler = new DownloadHandlerBuffer();
                request.SetRequestHeader("Content-Type", "application/json");
                
                yield return request.SendWebRequest();
        
                if (request.result == UnityWebRequest.Result.ConnectionError || request.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.LogError("Error uploading image: " + request.error);
                }
                else
                {
                    Debug.Log("Image uploaded successfully!");
                    // 서버 응답 처리
                    string jsonResponse = request.downloadHandler.text;
                    DisplayResults(jsonResponse); // 결과 처리 메서드 호출
                }
            }
        
            private void DisplayResults(string jsonResponse)
            {
                // 결과 처리 코드 작성
            }
        }
        ```
        
    
    ### 3.2 CaptureAndUploadPhoto 메서드를 버튼과 연결
    
    1. **PhotoCapture 스크립트 추가**:
        - **Hierarchy** 창에서 **Canvas** 또는 적절한 빈 게임 오브젝트를 선택한 후, **Inspector** 창에서 **Add Component** 버튼을 클릭하고 **PhotoCapture** 스크립트를 추가합니다.
    2. **버튼의 OnClick 이벤트 설정**:
        - **Button**을 선택한 후, **Inspector** 창의 **Button (Script)** 섹션에서 **On Click()** 이벤트를 찾습니다.
        - **On Click()** 이벤트에 **PhotoCapture** 스크립트를 추가합니다. **PhotoCapture** 스크립트가 포함된 게임 오브젝트를 드래그하여 추가하고, 드롭다운 목록에서 `CaptureAndUploadPhoto()` 메서드를 선택합니다.
    
    ### 4. 테스트 및 디버깅
    
    1. **플레이 모드 실행**: 상단의 **Play** 버튼을 눌러 실행해봅니다. 버튼을 클릭하면 사진이 촬영되고 서버로 업로드를 시도합니다.
- Unity s3 upload code(수정 완료)
    
    ```csharp
    using UnityEngine;
    using UnityEngine.UI;
    using UnityEngine.Networking;
    using System.Collections;
    using System.Text;
    
    public class PhotoCapture : MonoBehaviour
    {
        private WebCamTexture webcamTexture;
    
        void Start()
        {
            webcamTexture = new WebCamTexture();
            webcamTexture.Play();
        }
    
        public void CaptureAndUploadPhoto()
        {
            Texture2D photo = new Texture2D(webcamTexture.width, webcamTexture.height);
            photo.SetPixels(webcamTexture.GetPixels());
            photo.Apply();
    
            byte[] imageBytes = photo.EncodeToJPG(); // JPG 형식으로 인코딩
            string base64Image = System.Convert.ToBase64String(imageBytes); // Base64 인코딩
            StartCoroutine(UploadImage(base64Image));
        }
    
        private IEnumerator UploadImage(string base64Image)
        {
            // JSON 포맷으로 이미지 데이터를 감쌈
            string jsonBody = "{\"file\":\"" + base64Image + "\"}";
    
            UnityWebRequest request = new UnityWebRequest("https://kdhbyz2nva.execute-api.us-east-1.amazonaws.com/upload/v1", "POST");
            byte[] jsonBytes = Encoding.UTF8.GetBytes(jsonBody);
            
            // JSON 바디를 설정
            request.uploadHandler = new UploadHandlerRaw(jsonBytes);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("Content-Type", "application/json");
            
            yield return request.SendWebRequest();
    
            if (request.result == UnityWebRequest.Result.ConnectionError || request.result == UnityWebRequest.Result.ProtocolError)
            {
                Debug.LogError("Error uploading image: " + request.error);
            }
            else
            {
                Debug.Log("Image uploaded successfully!");
                // 서버 응답 처리
                string jsonResponse = request.downloadHandler.text;
                DisplayResults(jsonResponse); // 결과 처리 메서드 호출
            }
        }
    
        private void DisplayResults(string jsonResponse)
        {
            // 결과 처리 코드 작성
        }
    }
    
    ```
    

d
